Compile Time: 15.503s
begin
  begin -> stmts
    stmts -> import-stmt
      import-stmt -> "import"
      import-stmt -> import-list
        import-list -> "parsergen"
        import-list -> ","
        import-list -> "ecs_parser"
      import-stmt -> "\n"
    stmts -> var-stmt
      var-stmt -> "var"
      var-stmt -> var-list
        var-list -> "parser"
        var-list -> "="
        var-list -> unary-expr
          unary-expr -> "new"
          unary-expr -> visit-expr
            visit-expr -> "parsergen"
            visit-expr -> "."
            visit-expr -> "generator"
      var-stmt -> "\n"
    stmts -> expr-stmt
      expr-stmt -> visit-expr
        visit-expr -> "parser"
        visit-expr -> "."
        visit-expr -> element
          element -> "add_grammar"
          element -> fcall
            fcall -> "("
            fcall -> expr
              expr -> ""ecs-lang""
              expr -> ","
              expr -> visit-expr
                visit-expr -> "ecs_parser"
                visit-expr -> "."
                visit-expr -> "grammar"
            fcall -> ")"
      expr-stmt -> "\n"
    stmts -> expr-stmt
      expr-stmt -> visit-expr
        visit-expr -> "parser"
        visit-expr -> "."
        visit-expr -> element
          element -> "from_file"
          element -> fcall
            fcall -> "("
            fcall -> visit-expr
              visit-expr -> "context"
              visit-expr -> "."
              visit-expr -> visit-expr
                visit-expr -> "cmd_args"
                visit-expr -> "."
                visit-expr -> element
                  element -> "at"
                  element -> fcall
                    fcall -> "("
                    fcall -> "1"
                    fcall -> ")"
            fcall -> ")"
      expr-stmt -> "\n"
    stmts -> function-stmt
      function-stmt -> "function"
      function-stmt -> "compress_ast"
      function-stmt -> "("
      function-stmt -> "n"
      function-stmt -> ")"
      function-stmt -> "\n"
      function-stmt -> foreach-stmt
        foreach-stmt -> "foreach"
        foreach-stmt -> "it"
        foreach-stmt -> "in"
        foreach-stmt -> visit-expr
          visit-expr -> "n"
          visit-expr -> "."
          visit-expr -> "nodes"
        foreach-stmt -> "\n"
        foreach-stmt -> stmts
          stmts -> while-stmt
            while-stmt -> "while"
            while-stmt -> logic-and-expr
              logic-and-expr -> equal-expr
                equal-expr -> unary-expr
                  unary-expr -> "typeid"
                  unary-expr -> "it"
                equal-expr -> "=="
                equal-expr -> unary-expr
                  unary-expr -> "typeid"
                  unary-expr -> visit-expr
                    visit-expr -> "parsergen"
                    visit-expr -> "."
                    visit-expr -> "syntax_tree"
              logic-and-expr -> "&&"
              logic-and-expr -> equal-expr
                equal-expr -> visit-expr
                  visit-expr -> "it"
                  visit-expr -> "."
                  visit-expr -> visit-expr
                    visit-expr -> "nodes"
                    visit-expr -> "."
                    visit-expr -> "size"
                equal-expr -> "=="
                equal-expr -> "1"
            while-stmt -> "\n"
            while-stmt -> expr-stmt
              expr-stmt -> basic-expr
                basic-expr -> "it"
                basic-expr -> "="
                basic-expr -> visit-expr
                  visit-expr -> "it"
                  visit-expr -> "."
                  visit-expr -> visit-expr
                    visit-expr -> "nodes"
                    visit-expr -> "."
                    visit-expr -> "front"
              expr-stmt -> "\n"
            while-stmt -> "end"
            while-stmt -> "\n"
          stmts -> if-stmt
            if-stmt -> "if"
            if-stmt -> equal-expr
              equal-expr -> unary-expr
                unary-expr -> "typeid"
                unary-expr -> "it"
              equal-expr -> "=="
              equal-expr -> unary-expr
                unary-expr -> "typeid"
                unary-expr -> visit-expr
                  visit-expr -> "parsergen"
                  visit-expr -> "."
                  visit-expr -> "syntax_tree"
            if-stmt -> "\n"
            if-stmt -> expr-stmt
              expr-stmt -> element
                element -> "compress_ast"
                element -> fcall
                  fcall -> "("
                  fcall -> "it"
                  fcall -> ")"
              expr-stmt -> "\n"
            if-stmt -> else-stmt
              else-stmt -> "else"
              else-stmt -> "\n"
            if-stmt -> if-stmt
              if-stmt -> "if"
              if-stmt -> equal-expr
                equal-expr -> visit-expr
                  visit-expr -> "it"
                  visit-expr -> "."
                  visit-expr -> "type"
                equal-expr -> "=="
                equal-expr -> ""endl""
              if-stmt -> "\n"
              if-stmt -> expr-stmt
                expr-stmt -> basic-expr
                  basic-expr -> visit-expr
                    visit-expr -> "it"
                    visit-expr -> "."
                    visit-expr -> "data"
                  basic-expr -> "="
                  basic-expr -> ""\n""
                expr-stmt -> "\n"
              if-stmt -> "end"
              if-stmt -> "\n"
            if-stmt -> "end"
            if-stmt -> "\n"
        foreach-stmt -> "end"
        foreach-stmt -> "\n"
      function-stmt -> "end"
      function-stmt -> "\n"
    stmts -> function-stmt
      function-stmt -> "function"
      function-stmt -> "format"
      function-stmt -> "("
      function-stmt -> argument-list
        argument-list -> "os"
        argument-list -> ","
        argument-list -> argument-list
          argument-list -> "indent"
          argument-list -> ","
          argument-list -> "it"
      function-stmt -> ")"
      function-stmt -> "\n"
      function-stmt -> stmts
        stmts -> if-stmt
          if-stmt -> "if"
          if-stmt -> equal-expr
            equal-expr -> unary-expr
              unary-expr -> "typeid"
              unary-expr -> "it"
            equal-expr -> "!="
            equal-expr -> unary-expr
              unary-expr -> "typeid"
              unary-expr -> visit-expr
                visit-expr -> "parsergen"
                visit-expr -> "."
                visit-expr -> "syntax_tree"
          if-stmt -> "\n"
          if-stmt -> stmts
            stmts -> expr-stmt
              expr-stmt -> visit-expr
                visit-expr -> "os"
                visit-expr -> "."
                visit-expr -> element
                  element -> "print"
                  element -> fcall
                    fcall -> "("
                    fcall -> visit-expr
                      visit-expr -> "it"
                      visit-expr -> "."
                      visit-expr -> "data"
                    fcall -> ")"
              expr-stmt -> "\n"
            stmts -> return-stmt
              return-stmt -> "return"
              return-stmt -> "end"
              return-stmt -> "\n"
            stmts -> var-stmt
              var-stmt -> "var"
              var-stmt -> var-list
                var-list -> "i"
                var-list -> "="
                var-list -> "0"
              var-stmt -> "\n"
            stmts -> switch-stmt
              switch-stmt -> "switch"
              switch-stmt -> visit-expr
                visit-expr -> "it"
                visit-expr -> "."
                visit-expr -> "root"
              switch-stmt -> "\n"
              switch-stmt -> switch-stmts
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""begin""
                  switch-case -> "\n"
                  switch-case -> expr-stmt
                    expr-stmt -> element
                      element -> "format"
                      element -> fcall
                        fcall -> "("
                        fcall -> expr
                          expr -> "os"
                          expr -> ","
                          expr -> expr
                            expr -> "indent"
                            expr -> ","
                            expr -> visit-expr
                              visit-expr -> "it"
                              visit-expr -> "."
                              visit-expr -> element
                                element -> "nodes"
                                element -> index
                                  index -> "["
                                  index -> "0"
                                  index -> "]"
                        fcall -> ")"
                    expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""endline""
                  switch-case -> "\n"
                  switch-case -> if-stmt
                    if-stmt -> "if"
                    if-stmt -> equal-expr
                      equal-expr -> visit-expr
                        visit-expr -> "it"
                        visit-expr -> "."
                        visit-expr -> visit-expr
                          visit-expr -> element
                            element -> "nodes"
                            element -> index
                              index -> "["
                              index -> "0"
                              index -> "]"
                          visit-expr -> "."
                          visit-expr -> "type"
                      equal-expr -> "=="
                      equal-expr -> ""endl""
                    if-stmt -> "\n"
                    if-stmt -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> """"
                            fcall -> ")"
                      expr-stmt -> "\n"
                    if-stmt -> else-stmt
                      else-stmt -> "else"
                      else-stmt -> "\n"
                    if-stmt -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> "";""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    if-stmt -> "end"
                    if-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""pacakge-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "' '"
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> add-expr
                              add-expr -> ""package ""
                              add-expr -> "+"
                              add-expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "1"
                                    index -> "]"
                            fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""import-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "' '"
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""import ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "1"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> """"
                            fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""import-list""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> unary-expr
                                      unary-expr -> "i"
                                      unary-expr -> "++"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> relat-expr
                        relat-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> "nodes"
                            visit-expr -> "."
                            visit-expr -> "size"
                        relat-expr -> ">"
                        relat-expr -> "1"
                      if-stmt -> "\n"
                      if-stmt -> stmts
                        stmts -> if-stmt
                          if-stmt -> "if"
                          if-stmt -> equal-expr
                            equal-expr -> visit-expr
                              visit-expr -> "it"
                              visit-expr -> "."
                              visit-expr -> visit-expr
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "i"
                                    index -> "]"
                                visit-expr -> "."
                                visit-expr -> "data"
                            equal-expr -> "=="
                            equal-expr -> ""as""
                          if-stmt -> "\n"
                          if-stmt -> expr-stmt
                            expr-stmt -> visit-expr
                              visit-expr -> "os"
                              visit-expr -> "."
                              visit-expr -> element
                                element -> "print"
                                element -> fcall
                                  fcall -> "("
                                  fcall -> add-expr
                                    add-expr -> "" as ""
                                    add-expr -> "+"
                                    add-expr -> visit-expr
                                      visit-expr -> "it"
                                      visit-expr -> "."
                                      visit-expr -> visit-expr
                                        visit-expr -> element
                                          element -> "nodes"
                                          element -> index
                                            index -> "["
                                            index -> unary-expr
                                              unary-expr -> "++"
                                              unary-expr -> "i"
                                            index -> "]"
                                        visit-expr -> "."
                                        visit-expr -> "data"
                                  fcall -> ")"
                            expr-stmt -> "\n"
                          if-stmt -> "end"
                          if-stmt -> "\n"
                        stmts -> if-stmt
                          if-stmt -> "if"
                          if-stmt -> equal-expr
                            equal-expr -> visit-expr
                              visit-expr -> "it"
                              visit-expr -> "."
                              visit-expr -> visit-expr
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "i"
                                    index -> "]"
                                visit-expr -> "."
                                visit-expr -> "data"
                            equal-expr -> "=="
                            equal-expr -> "",""
                          if-stmt -> "\n"
                          if-stmt -> stmts
                            stmts -> expr-stmt
                              expr-stmt -> visit-expr
                                visit-expr -> "os"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "print"
                                  element -> fcall
                                    fcall -> "("
                                    fcall -> "", ""
                                    fcall -> ")"
                              expr-stmt -> "\n"
                            stmts -> expr-stmt
                              expr-stmt -> element
                                element -> "format"
                                element -> fcall
                                  fcall -> "("
                                  fcall -> expr
                                    expr -> "os"
                                    expr -> ","
                                    expr -> expr
                                      expr -> "indent"
                                      expr -> ","
                                      expr -> visit-expr
                                        visit-expr -> "it"
                                        visit-expr -> "."
                                        visit-expr -> element
                                          element -> "nodes"
                                          element -> index
                                            index -> "["
                                            index -> unary-expr
                                              unary-expr -> "++"
                                              unary-expr -> "i"
                                            index -> "]"
                                  fcall -> ")"
                              expr-stmt -> "\n"
                          if-stmt -> "end"
                          if-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""module-list""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> visit-expr
                              visit-expr -> "it"
                              visit-expr -> "."
                              visit-expr -> visit-expr
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "0"
                                    index -> "]"
                                visit-expr -> "."
                                visit-expr -> "data"
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> relat-expr
                        relat-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> "nodes"
                            visit-expr -> "."
                            visit-expr -> "size"
                        relat-expr -> ">"
                        relat-expr -> "1"
                      if-stmt -> "\n"
                      if-stmt -> stmts
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> "".""
                                fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> "indent"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> "2"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""block-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "' '"
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""block""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> add-expr
                                add-expr -> "indent"
                                add-expr -> "+"
                                add-expr -> "1"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "2"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "' '"
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""end""
                            fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""namespace-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "' '"
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> add-expr
                              add-expr -> ""namespace ""
                              add-expr -> "+"
                              add-expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> visit-expr
                                  visit-expr -> element
                                    element -> "nodes"
                                    element -> index
                                      index -> "["
                                      index -> "1"
                                      index -> "]"
                                  visit-expr -> "."
                                  visit-expr -> "data"
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> add-expr
                                add-expr -> "indent"
                                add-expr -> "+"
                                add-expr -> "1"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "3"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "' '"
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""end""
                            fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""if-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "' '"
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""if ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "1"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> """"
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> add-expr
                                add-expr -> "indent"
                                add-expr -> "+"
                                add-expr -> "1"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "3"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> var-stmt
                      var-stmt -> "var"
                      var-stmt -> var-list
                        var-list -> "index"
                        var-list -> "="
                        var-list -> "0"
                      var-stmt -> "\n"
                    stmts -> for-stmt
                      for-stmt -> "for"
                      for-stmt -> var-list
                        var-list -> "index"
                        var-list -> "="
                        var-list -> "4"
                      for-stmt -> ","
                      for-stmt -> equal-expr
                        equal-expr -> "index"
                        equal-expr -> "!="
                        equal-expr -> add-expr
                          add-expr -> visit-expr
                            visit-expr -> "it"
                            visit-expr -> "."
                            visit-expr -> visit-expr
                              visit-expr -> "nodes"
                              visit-expr -> "."
                              visit-expr -> "size"
                          add-expr -> "-"
                          add-expr -> "2"
                      for-stmt -> ","
                      for-stmt -> basic-expr
                        basic-expr -> "index"
                        basic-expr -> "+="
                        basic-expr -> "2"
                      for-stmt -> "\n"
                      for-stmt -> stmts
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> "indent"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> "index"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> add-expr
                                    add-expr -> "indent"
                                    add-expr -> "+"
                                    add-expr -> "1"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> add-expr
                                          add-expr -> "index"
                                          add-expr -> "+"
                                          add-expr -> "1"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                      for-stmt -> "end"
                      for-stmt -> "\n"
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "' '"
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""end""
                            fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""var-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "' '"
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> add-expr
                              add-expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> visit-expr
                                  visit-expr -> element
                                    element -> "nodes"
                                    element -> index
                                      index -> "["
                                      index -> "0"
                                      index -> "]"
                                  visit-expr -> "."
                                  visit-expr -> "data"
                              add-expr -> "+"
                              add-expr -> "" ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "1"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "2"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""var-def""
                  switch-case -> "\n"
                  switch-case -> if-stmt
                    if-stmt -> "if"
                    if-stmt -> relat-expr
                      relat-expr -> visit-expr
                        visit-expr -> "it"
                        visit-expr -> "."
                        visit-expr -> visit-expr
                          visit-expr -> "nodes"
                          visit-expr -> "."
                          visit-expr -> "size"
                      relat-expr -> ">"
                      relat-expr -> "1"
                    if-stmt -> "\n"
                    if-stmt -> stmts
                      stmts -> expr-stmt
                        expr-stmt -> element
                          element -> "format"
                          element -> fcall
                            fcall -> "("
                            fcall -> expr
                              expr -> "os"
                              expr -> ","
                              expr -> expr
                                expr -> "indent"
                                expr -> ","
                                expr -> visit-expr
                                  visit-expr -> "it"
                                  visit-expr -> "."
                                  visit-expr -> element
                                    element -> "nodes"
                                    element -> index
                                      index -> "["
                                      index -> "0"
                                      index -> "]"
                            fcall -> ")"
                        expr-stmt -> "\n"
                      stmts -> expr-stmt
                        expr-stmt -> visit-expr
                          visit-expr -> "os"
                          visit-expr -> "."
                          visit-expr -> element
                            element -> "print"
                            element -> fcall
                              fcall -> "("
                              fcall -> ""= ""
                              fcall -> ")"
                        expr-stmt -> "\n"
                      stmts -> expr-stmt
                        expr-stmt -> element
                          element -> "format"
                          element -> fcall
                            fcall -> "("
                            fcall -> expr
                              expr -> "os"
                              expr -> ","
                              expr -> expr
                                expr -> "indent"
                                expr -> ","
                                expr -> visit-expr
                                  visit-expr -> "it"
                                  visit-expr -> "."
                                  visit-expr -> element
                                    element -> "nodes"
                                    element -> index
                                      index -> "["
                                      index -> "2"
                                      index -> "]"
                            fcall -> ")"
                        expr-stmt -> "\n"
                    if-stmt -> else-stmt
                      else-stmt -> "else"
                      else-stmt -> "\n"
                    if-stmt -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "0"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    if-stmt -> "end"
                    if-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""var-bind""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""(""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "1"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> for-stmt
                      for-stmt -> "for"
                      for-stmt -> var-list
                        var-list -> "i"
                        var-list -> "="
                        var-list -> "2"
                      for-stmt -> ","
                      for-stmt -> equal-expr
                        equal-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> element
                              element -> "nodes"
                              element -> index
                                index -> "["
                                index -> "i"
                                index -> "]"
                            visit-expr -> "."
                            visit-expr -> "data"
                        equal-expr -> "!="
                        equal-expr -> "",""
                      for-stmt -> ","
                      for-stmt -> basic-expr
                        basic-expr -> "i"
                        basic-expr -> "+="
                        basic-expr -> "2"
                      for-stmt -> "\n"
                      for-stmt -> stmts
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> "",""
                                fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> "indent"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> add-expr
                                          add-expr -> "i"
                                          add-expr -> "+"
                                          add-expr -> "1"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                      for-stmt -> "end"
                      for-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "")""
                            fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""var-bind-list""
                  switch-case -> "\n"
                  switch-case -> if-stmt
                    if-stmt -> "if"
                    if-stmt -> equal-expr
                      equal-expr -> unary-expr
                        unary-expr -> "typeid"
                        unary-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> element
                            element -> "nodes"
                            element -> index
                              index -> "["
                              index -> "0"
                              index -> "]"
                      equal-expr -> "=="
                      equal-expr -> visit-expr
                        visit-expr -> "parsergen"
                        visit-expr -> "."
                        visit-expr -> "syntax_tree"
                    if-stmt -> "\n"
                    if-stmt -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "0"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    if-stmt -> else-stmt
                      else-stmt -> "else"
                      else-stmt -> "\n"
                    if-stmt -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "ps"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> visit-expr
                              visit-expr -> "it"
                              visit-expr -> "."
                              visit-expr -> visit-expr
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "0"
                                    index -> "]"
                                visit-expr -> "."
                                visit-expr -> "data"
                            fcall -> ")"
                      expr-stmt -> "\n"
                    if-stmt -> "end"
                    if-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""var-list""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> add-expr
                              add-expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> visit-expr
                                  visit-expr -> element
                                    element -> "nodes"
                                    element -> index
                                      index -> "["
                                      index -> "0"
                                      index -> "]"
                                  visit-expr -> "."
                                  visit-expr -> "data"
                              add-expr -> "+"
                              add-expr -> "" ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""= ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "2"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> ";"
                    stmts -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> relat-expr
                        relat-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> "nodes"
                            visit-expr -> "."
                            visit-expr -> "size"
                        relat-expr -> ">"
                        relat-expr -> "3"
                      if-stmt -> "\n"
                      if-stmt -> stmts
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> "", ""
                                fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> "indent"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> "4"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""using-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""using ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "1"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "2"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""using-list""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "0"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> relat-expr
                        relat-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> "nodes"
                            visit-expr -> "."
                            visit-expr -> "size"
                        relat-expr -> ">"
                        relat-expr -> "1"
                      if-stmt -> "\n"
                      if-stmt -> stmts
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> "", ""
                                fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> "indent"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> "2"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""else-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""else ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> relat-expr
                        relat-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> "nodes"
                            visit-expr -> "."
                            visit-expr -> "size"
                        relat-expr -> ">"
                        relat-expr -> "2"
                      if-stmt -> "\n"
                      if-stmt -> stmts
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> ""if ""
                                fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> "indent"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> "2"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> """"
                            fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""switch-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""switch ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "1"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> """"
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "3"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""end""
                            fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""switch-stmts""
                  switch-case -> "\n"
                  switch-case -> for-stmt
                    for-stmt -> "for"
                    for-stmt -> var-list
                      var-list -> "i"
                      var-list -> "="
                      var-list -> "0"
                    for-stmt -> ","
                    for-stmt -> equal-expr
                      equal-expr -> "i"
                      equal-expr -> "!="
                      equal-expr -> visit-expr
                        visit-expr -> "it"
                        visit-expr -> "."
                        visit-expr -> visit-expr
                          visit-expr -> "nodes"
                          visit-expr -> "."
                          visit-expr -> "size"
                    for-stmt -> ","
                    for-stmt -> unary-expr
                      unary-expr -> "i"
                      unary-expr -> "++"
                    for-stmt -> "\n"
                    for-stmt -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> equal-expr
                        equal-expr -> unary-expr
                          unary-expr -> "typeid"
                          unary-expr -> visit-expr
                            visit-expr -> "it"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "nodes"
                              element -> index
                                index -> "["
                                index -> "i"
                                index -> "]"
                        equal-expr -> "!="
                        equal-expr -> unary-expr
                          unary-expr -> "typeid"
                          unary-expr -> visit-expr
                            visit-expr -> "parsergen"
                            visit-expr -> "."
                            visit-expr -> "syntax_tree"
                      if-stmt -> "\n"
                      if-stmt -> control-stmt
                        control-stmt -> "continue"
                        control-stmt -> "\n"
                      if-stmt -> else-stmt
                        else-stmt -> "else"
                        else-stmt -> "\n"
                      if-stmt -> expr-stmt
                        expr-stmt -> element
                          element -> "format"
                          element -> fcall
                            fcall -> "("
                            fcall -> expr
                              expr -> "os"
                              expr -> ","
                              expr -> expr
                                expr -> add-expr
                                  add-expr -> "indent"
                                  add-expr -> "+"
                                  add-expr -> "1"
                                expr -> ","
                                expr -> visit-expr
                                  visit-expr -> "it"
                                  visit-expr -> "."
                                  visit-expr -> element
                                    element -> "nodes"
                                    element -> index
                                      index -> "["
                                      index -> "i"
                                      index -> "]"
                            fcall -> ")"
                        expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                    for-stmt -> "end"
                    for-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""switch-case""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""case ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "1"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> """"
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> add-expr
                                add-expr -> "indent"
                                add-expr -> "+"
                                add-expr -> "1"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "3"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""end""
                            fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""switch-default""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""default""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> add-expr
                                add-expr -> "indent"
                                add-expr -> "+"
                                add-expr -> "1"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "2"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""end""
                            fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""while-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""while ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "1"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> """"
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> add-expr
                                add-expr -> "indent"
                                add-expr -> "+"
                                add-expr -> "1"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "3"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""end""
                            fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""loop-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""loop ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> add-expr
                                add-expr -> "indent"
                                add-expr -> "+"
                                add-expr -> "1"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "2"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> relat-expr
                        relat-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> "nodes"
                            visit-expr -> "."
                            visit-expr -> "size"
                        relat-expr -> ">"
                        relat-expr -> "4"
                      if-stmt -> "\n"
                      if-stmt -> stmts
                        stmts -> foreach-stmt
                          foreach-stmt -> "foreach"
                          foreach-stmt -> "i"
                          foreach-stmt -> "in"
                          foreach-stmt -> element
                            element -> "range"
                            element -> fcall
                              fcall -> "("
                              fcall -> mul-expr
                                mul-expr -> "2"
                                mul-expr -> "*"
                                mul-expr -> "indent"
                              fcall -> ")"
                          foreach-stmt -> "do"
                          foreach-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> "" ""
                                fcall -> ")"
                          foreach-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "println"
                              element -> fcall
                                fcall -> "("
                                fcall -> ""end""
                                fcall -> ")"
                          expr-stmt -> "\n"
                      if-stmt -> else-stmt
                        else-stmt -> "else"
                        else-stmt -> "\n"
                      if-stmt -> expr-stmt
                        expr-stmt -> element
                          element -> "format"
                          element -> fcall
                            fcall -> "("
                            fcall -> expr
                              expr -> "os"
                              expr -> ","
                              expr -> expr
                                expr -> "indent"
                                expr -> ","
                                expr -> visit-expr
                                  visit-expr -> "it"
                                  visit-expr -> "."
                                  visit-expr -> element
                                    element -> "nodes"
                                    element -> index
                                      index -> "["
                                      index -> "3"
                                      index -> "]"
                            fcall -> ")"
                        expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""until-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""until ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "1"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> """"
                            fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""for-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "index"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""for ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> var-stmt
                      var-stmt -> "var"
                      var-stmt -> var-list
                        var-list -> "num"
                        var-list -> "="
                        var-list -> "0"
                      var-stmt -> ";"
                    stmts -> "\n"
                    stmts -> for-stmt
                      for-stmt -> "for"
                      for-stmt -> var-list
                        var-list -> "index"
                        var-list -> "="
                        var-list -> "0"
                      for-stmt -> ","
                      for-stmt -> equal-expr
                        equal-expr -> "index"
                        equal-expr -> "!="
                        equal-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> "nodes"
                            visit-expr -> "."
                            visit-expr -> "size"
                      for-stmt -> ","
                      for-stmt -> basic-expr
                        basic-expr -> "index"
                        basic-expr -> "+="
                        basic-expr -> "0"
                      for-stmt -> "\n"
                      for-stmt -> if-stmt
                        if-stmt -> "if"
                        if-stmt -> equal-expr
                          equal-expr -> unary-expr
                            unary-expr -> "typeid"
                            unary-expr -> visit-expr
                              visit-expr -> "it"
                              visit-expr -> "."
                              visit-expr -> element
                                element -> "nodes"
                                element -> index
                                  index -> "["
                                  index -> unary-expr
                                    unary-expr -> "++"
                                    unary-expr -> "index"
                                  index -> "]"
                          equal-expr -> "=="
                          equal-expr -> unary-expr
                            unary-expr -> "typeid"
                            unary-expr -> visit-expr
                              visit-expr -> "parsergen"
                              visit-expr -> "."
                              visit-expr -> "syntax_tree"
                        if-stmt -> "\n"
                        if-stmt -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> "indent"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> "index"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                        if-stmt -> else-stmt
                          else-stmt -> "else"
                          else-stmt -> "\n"
                        if-stmt -> stmts
                          stmts -> expr-stmt
                            expr-stmt -> visit-expr
                              visit-expr -> "os"
                              visit-expr -> "."
                              visit-expr -> element
                                element -> "print"
                                element -> fcall
                                  fcall -> "("
                                  fcall -> add-expr
                                    add-expr -> visit-expr
                                      visit-expr -> "it"
                                      visit-expr -> "."
                                      visit-expr -> visit-expr
                                        visit-expr -> element
                                          element -> "nodes"
                                          element -> index
                                            index -> "["
                                            index -> "index"
                                            index -> "]"
                                        visit-expr -> "."
                                        visit-expr -> "data"
                                    add-expr -> "+"
                                    add-expr -> "" ""
                                  fcall -> ")"
                            expr-stmt -> "\n"
                          stmts -> expr-stmt
                            expr-stmt -> unary-expr
                              unary-expr -> "num"
                              unary-expr -> "++"
                            expr-stmt -> "\n"
                          stmts -> if-stmt
                            if-stmt -> "if"
                            if-stmt -> equal-expr
                              equal-expr -> "num"
                              equal-expr -> "=="
                              equal-expr -> "2"
                            if-stmt -> "\n"
                            if-stmt -> stmts
                              stmts -> if-stmt
                                if-stmt -> "if"
                                if-stmt -> equal-expr
                                  equal-expr -> unary-expr
                                    unary-expr -> "typeid"
                                    unary-expr -> visit-expr
                                      visit-expr -> "it"
                                      visit-expr -> "."
                                      visit-expr -> element
                                        element -> "nodes"
                                        element -> index
                                          index -> "["
                                          index -> unary-expr
                                            unary-expr -> "++"
                                            unary-expr -> "index"
                                          index -> "]"
                                  equal-expr -> "=="
                                  equal-expr -> unary-expr
                                    unary-expr -> "typeid"
                                    unary-expr -> visit-expr
                                      visit-expr -> "parsergen"
                                      visit-expr -> "."
                                      visit-expr -> "syntax_tree"
                                if-stmt -> "\n"
                                if-stmt -> expr-stmt
                                  expr-stmt -> element
                                    element -> "format"
                                    element -> fcall
                                      fcall -> "("
                                      fcall -> expr
                                        expr -> "os"
                                        expr -> ","
                                        expr -> expr
                                          expr -> "indent"
                                          expr -> ","
                                          expr -> visit-expr
                                            visit-expr -> "it"
                                            visit-expr -> "."
                                            visit-expr -> element
                                              element -> "nodes"
                                              element -> index
                                                index -> "["
                                                index -> "index"
                                                index -> "]"
                                      fcall -> ")"
                                  expr-stmt -> "\n"
                                if-stmt -> else-stmt
                                  else-stmt -> "else"
                                  else-stmt -> "\n"
                                if-stmt -> expr-stmt
                                  expr-stmt -> unary-expr
                                    unary-expr -> "index"
                                    unary-expr -> "--"
                                  expr-stmt -> "\n"
                                if-stmt -> "end"
                                if-stmt -> "\n"
                              stmts -> expr-stmt
                                expr-stmt -> basic-expr
                                  basic-expr -> "i"
                                  basic-expr -> "="
                                  basic-expr -> "index"
                                expr-stmt -> "\n"
                              stmts -> control-stmt
                                control-stmt -> "break"
                                control-stmt -> "\n"
                            if-stmt -> "end"
                            if-stmt -> "\n"
                        if-stmt -> "end"
                        if-stmt -> "\n"
                      for-stmt -> "end"
                      for-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> equal-expr
                        equal-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> element
                              element -> "nodes"
                              element -> index
                                index -> "["
                                index -> unary-expr
                                  unary-expr -> "++"
                                  unary-expr -> "i"
                                index -> "]"
                            visit-expr -> "."
                            visit-expr -> "type"
                        equal-expr -> "=="
                        equal-expr -> ""endl""
                      if-stmt -> "\n"
                      if-stmt -> stmts
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "println"
                              element -> fcall
                                fcall -> "("
                                fcall -> """"
                                fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> add-expr
                                    add-expr -> "indent"
                                    add-expr -> "+"
                                    add-expr -> "1"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> unary-expr
                                          unary-expr -> "++"
                                          unary-expr -> "i"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> foreach-stmt
                          foreach-stmt -> "foreach"
                          foreach-stmt -> "index"
                          foreach-stmt -> "in"
                          foreach-stmt -> element
                            element -> "range"
                            element -> fcall
                              fcall -> "("
                              fcall -> mul-expr
                                mul-expr -> "2"
                                mul-expr -> "*"
                                mul-expr -> "indent"
                              fcall -> ")"
                          foreach-stmt -> "do"
                          foreach-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> "" ""
                                fcall -> ")"
                          foreach-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "println"
                              element -> fcall
                                fcall -> "("
                                fcall -> ""end""
                                fcall -> ")"
                          expr-stmt -> "\n"
                      if-stmt -> else-stmt
                        else-stmt -> "else"
                        else-stmt -> "\n"
                      if-stmt -> stmts
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> "" do ""
                                fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> "indent"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> unary-expr
                                          unary-expr -> "++"
                                          unary-expr -> "i"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> "indent"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> unary-expr
                                          unary-expr -> "++"
                                          unary-expr -> "i"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""foreach-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "index"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""foreach ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> equal-expr
                        equal-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> element
                              element -> "nodes"
                              element -> index
                                index -> "["
                                index -> unary-expr
                                  unary-expr -> "++"
                                  unary-expr -> "i"
                                index -> "]"
                            visit-expr -> "."
                            visit-expr -> "type"
                        equal-expr -> "=="
                        equal-expr -> ""id""
                      if-stmt -> "\n"
                      if-stmt -> expr-stmt
                        expr-stmt -> visit-expr
                          visit-expr -> "os"
                          visit-expr -> "."
                          visit-expr -> element
                            element -> "print"
                            element -> fcall
                              fcall -> "("
                              fcall -> add-expr
                                add-expr -> visit-expr
                                  visit-expr -> "it"
                                  visit-expr -> "."
                                  visit-expr -> visit-expr
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> "i"
                                        index -> "]"
                                    visit-expr -> "."
                                    visit-expr -> "data"
                                add-expr -> "+"
                                add-expr -> "" ""
                              fcall -> ")"
                        expr-stmt -> "\n"
                      if-stmt -> else-stmt
                        else-stmt -> "else"
                        else-stmt -> "\n"
                      if-stmt -> expr-stmt
                        expr-stmt -> unary-expr
                          unary-expr -> "--"
                          unary-expr -> "i"
                        expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> unary-expr
                        unary-expr -> "++"
                        unary-expr -> "i"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""in ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> unary-expr
                                      unary-expr -> "++"
                                      unary-expr -> "i"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> equal-expr
                        equal-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> element
                              element -> "nodes"
                              element -> index
                                index -> "["
                                index -> unary-expr
                                  unary-expr -> "++"
                                  unary-expr -> "i"
                                index -> "]"
                            visit-expr -> "."
                            visit-expr -> "type"
                        equal-expr -> "=="
                        equal-expr -> ""endl""
                      if-stmt -> "\n"
                      if-stmt -> stmts
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "println"
                              element -> fcall
                                fcall -> "("
                                fcall -> """"
                                fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> add-expr
                                    add-expr -> "indent"
                                    add-expr -> "+"
                                    add-expr -> "1"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> unary-expr
                                          unary-expr -> "++"
                                          unary-expr -> "i"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> foreach-stmt
                          foreach-stmt -> "foreach"
                          foreach-stmt -> "index"
                          foreach-stmt -> "in"
                          foreach-stmt -> element
                            element -> "range"
                            element -> fcall
                              fcall -> "("
                              fcall -> mul-expr
                                mul-expr -> "2"
                                mul-expr -> "*"
                                mul-expr -> "indent"
                              fcall -> ")"
                          foreach-stmt -> "do"
                          foreach-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> "" ""
                                fcall -> ")"
                          foreach-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "println"
                              element -> fcall
                                fcall -> "("
                                fcall -> ""end""
                                fcall -> ")"
                          expr-stmt -> "\n"
                      if-stmt -> else-stmt
                        else-stmt -> "else"
                        else-stmt -> "\n"
                      if-stmt -> stmts
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> ""do ""
                                fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> "indent"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> unary-expr
                                          unary-expr -> "++"
                                          unary-expr -> "i"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> "indent"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> unary-expr
                                          unary-expr -> "++"
                                          unary-expr -> "i"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""function-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "index"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""function ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> visit-expr
                              visit-expr -> "it"
                              visit-expr -> "."
                              visit-expr -> visit-expr
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "1"
                                    index -> "]"
                                visit-expr -> "."
                                visit-expr -> "data"
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""(""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> equal-expr
                        equal-expr -> unary-expr
                          unary-expr -> "typeid"
                          unary-expr -> visit-expr
                            visit-expr -> "it"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "nodes"
                              element -> index
                                index -> "["
                                index -> "3"
                                index -> "]"
                        equal-expr -> "=="
                        equal-expr -> unary-expr
                          unary-expr -> "typeid"
                          unary-expr -> visit-expr
                            visit-expr -> "parsergen"
                            visit-expr -> "."
                            visit-expr -> "syntax_tree"
                      if-stmt -> "\n"
                      if-stmt -> stmts
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> "indent"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> "3"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> basic-expr
                            basic-expr -> "i"
                            basic-expr -> "="
                            basic-expr -> "3"
                          expr-stmt -> "\n"
                      if-stmt -> else-stmt
                        else-stmt -> "else"
                        else-stmt -> "\n"
                      if-stmt -> expr-stmt
                        expr-stmt -> basic-expr
                          basic-expr -> "i"
                          basic-expr -> "="
                          basic-expr -> "2"
                        expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> unary-expr
                        unary-expr -> "++"
                        unary-expr -> "i"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "") ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> equal-expr
                        equal-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> element
                              element -> "nodes"
                              element -> index
                                index -> "["
                                index -> unary-expr
                                  unary-expr -> "++"
                                  unary-expr -> "i"
                                index -> "]"
                            visit-expr -> "."
                            visit-expr -> "data"
                        equal-expr -> "=="
                        equal-expr -> ""override""
                      if-stmt -> "\n"
                      if-stmt -> expr-stmt
                        expr-stmt -> visit-expr
                          visit-expr -> "os"
                          visit-expr -> "."
                          visit-expr -> element
                            element -> "print"
                            element -> fcall
                              fcall -> "("
                              fcall -> ""override""
                              fcall -> ")"
                        expr-stmt -> "\n"
                      if-stmt -> else-stmt
                        else-stmt -> "else"
                        else-stmt -> "\n"
                      if-stmt -> expr-stmt
                        expr-stmt -> unary-expr
                          unary-expr -> "--"
                          unary-expr -> "i"
                        expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> unary-expr
                        unary-expr -> "++"
                        unary-expr -> "i"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> """"
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> equal-expr
                        equal-expr -> unary-expr
                          unary-expr -> "typeid"
                          unary-expr -> visit-expr
                            visit-expr -> "it"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "nodes"
                              element -> index
                                index -> "["
                                index -> unary-expr
                                  unary-expr -> "++"
                                  unary-expr -> "i"
                                index -> "]"
                        equal-expr -> "!="
                        equal-expr -> unary-expr
                          unary-expr -> "typeid"
                          unary-expr -> visit-expr
                            visit-expr -> "parsergen"
                            visit-expr -> "."
                            visit-expr -> "syntax_tree"
                      if-stmt -> "\n"
                      if-stmt -> stmts
                        stmts -> foreach-stmt
                          foreach-stmt -> "foreach"
                          foreach-stmt -> "index"
                          foreach-stmt -> "in"
                          foreach-stmt -> element
                            element -> "range"
                            element -> fcall
                              fcall -> "("
                              fcall -> mul-expr
                                mul-expr -> "2"
                                mul-expr -> "*"
                                mul-expr -> "indent"
                              fcall -> ")"
                          foreach-stmt -> "do"
                          foreach-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> "" ""
                                fcall -> ")"
                          foreach-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> ""{""
                                fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "println"
                              element -> fcall
                                fcall -> "("
                                fcall -> """"
                                fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> add-expr
                                    add-expr -> "indent"
                                    add-expr -> "+"
                                    add-expr -> "1"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> unary-expr
                                          unary-expr -> "++"
                                          unary-expr -> "i"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> foreach-stmt
                          foreach-stmt -> "foreach"
                          foreach-stmt -> "index"
                          foreach-stmt -> "in"
                          foreach-stmt -> element
                            element -> "range"
                            element -> fcall
                              fcall -> "("
                              fcall -> mul-expr
                                mul-expr -> "2"
                                mul-expr -> "*"
                                mul-expr -> "indent"
                              fcall -> ")"
                          foreach-stmt -> "do"
                          foreach-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> "" ""
                                fcall -> ")"
                          foreach-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "println"
                              element -> fcall
                                fcall -> "("
                                fcall -> ""}""
                                fcall -> ")"
                          expr-stmt -> "\n"
                      if-stmt -> else-stmt
                        else-stmt -> "else"
                        else-stmt -> "\n"
                      if-stmt -> stmts
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> add-expr
                                    add-expr -> "indent"
                                    add-expr -> "+"
                                    add-expr -> "1"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> "i"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> foreach-stmt
                          foreach-stmt -> "foreach"
                          foreach-stmt -> "index"
                          foreach-stmt -> "in"
                          foreach-stmt -> element
                            element -> "range"
                            element -> fcall
                              fcall -> "("
                              fcall -> mul-expr
                                mul-expr -> "2"
                                mul-expr -> "*"
                                mul-expr -> "indent"
                              fcall -> ")"
                          foreach-stmt -> "do"
                          foreach-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> "" ""
                                fcall -> ")"
                          foreach-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "println"
                              element -> fcall
                                fcall -> "("
                                fcall -> ""end""
                                fcall -> ")"
                          expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""return-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "index"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""return ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "1"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> relat-expr
                        relat-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> "nodes"
                            visit-expr -> "."
                            visit-expr -> "size"
                        relat-expr -> ">"
                        relat-expr -> "2"
                      if-stmt -> "\n"
                      if-stmt -> expr-stmt
                        expr-stmt -> element
                          element -> "format"
                          element -> fcall
                            fcall -> "("
                            fcall -> expr
                              expr -> "os"
                              expr -> ","
                              expr -> expr
                                expr -> "indent"
                                expr -> ","
                                expr -> visit-expr
                                  visit-expr -> "it"
                                  visit-expr -> "."
                                  visit-expr -> element
                                    element -> "nodes"
                                    element -> index
                                      index -> "["
                                      index -> "2"
                                      index -> "]"
                            fcall -> ")"
                        expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""try-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "index"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""try""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> add-expr
                                add-expr -> "indent"
                                add-expr -> "+"
                                add-expr -> "1"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "2"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> for-stmt
                      for-stmt -> "for"
                      for-stmt -> var-list
                        var-list -> "i"
                        var-list -> "="
                        var-list -> "3"
                      for-stmt -> ","
                      for-stmt -> equal-expr
                        equal-expr -> unary-expr
                          unary-expr -> "typeid"
                          unary-expr -> visit-expr
                            visit-expr -> "it"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "nodes"
                              element -> index
                                index -> "["
                                index -> "i"
                                index -> "]"
                        equal-expr -> "!="
                        equal-expr -> unary-expr
                          unary-expr -> "typeid"
                          unary-expr -> visit-expr
                            visit-expr -> "parsergen"
                            visit-expr -> "."
                            visit-expr -> "syntax_tree"
                      for-stmt -> ","
                      for-stmt -> unary-expr
                        unary-expr -> "i"
                        unary-expr -> "++"
                      for-stmt -> "\n"
                      for-stmt -> stmts
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> "indent"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> "i"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> unary-expr
                            unary-expr -> "i"
                            unary-expr -> "++"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> add-expr
                                    add-expr -> "indent"
                                    add-expr -> "+"
                                    add-expr -> "1"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> "i"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                      for-stmt -> "end"
                      for-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""end""
                            fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""catch-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""catch ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> add-expr
                              add-expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> visit-expr
                                  visit-expr -> element
                                    element -> "nodes"
                                    element -> index
                                      index -> "["
                                      index -> "1"
                                      index -> "]"
                                  visit-expr -> "."
                                  visit-expr -> "data"
                              add-expr -> "+"
                              add-expr -> "" ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> equal-expr
                        equal-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> element
                              element -> "nodes"
                              element -> index
                                index -> "["
                                index -> "2"
                                index -> "]"
                            visit-expr -> "."
                            visit-expr -> "type"
                        equal-expr -> "!="
                        equal-expr -> ""endl""
                      if-stmt -> "\n"
                      if-stmt -> stmts
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> "": ""
                                fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> "indent"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> "3"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> """"
                            fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""throw-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""throw ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "1"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> relat-expr
                        relat-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> "nodes"
                            visit-expr -> "."
                            visit-expr -> "size"
                        relat-expr -> ">"
                        relat-expr -> "2"
                      if-stmt -> "\n"
                      if-stmt -> expr-stmt
                        expr-stmt -> element
                          element -> "format"
                          element -> fcall
                            fcall -> "("
                            fcall -> expr
                              expr -> "os"
                              expr -> ","
                              expr -> expr
                                expr -> "indent"
                                expr -> ","
                                expr -> visit-expr
                                  visit-expr -> "it"
                                  visit-expr -> "."
                                  visit-expr -> element
                                    element -> "nodes"
                                    element -> index
                                      index -> "["
                                      index -> "2"
                                      index -> "]"
                            fcall -> ")"
                        expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""class-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> add-expr
                              add-expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> visit-expr
                                  visit-expr -> element
                                    element -> "nodes"
                                    element -> index
                                      index -> "["
                                      index -> "0"
                                      index -> "]"
                                  visit-expr -> "."
                                  visit-expr -> "data"
                              add-expr -> "+"
                              add-expr -> "" ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> add-expr
                              add-expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> visit-expr
                                  visit-expr -> element
                                    element -> "nodes"
                                    element -> index
                                      index -> "["
                                      index -> "1"
                                      index -> "]"
                                  visit-expr -> "."
                                  visit-expr -> "data"
                              add-expr -> "+"
                              add-expr -> "" ""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> basic-expr
                        basic-expr -> "i"
                        basic-expr -> "="
                        basic-expr -> "2"
                      expr-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> relat-expr
                        relat-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> "nodes"
                            visit-expr -> "."
                            visit-expr -> "size"
                        relat-expr -> ">"
                        relat-expr -> "6"
                      if-stmt -> "\n"
                      if-stmt -> stmts
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> ""extends ""
                                fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> "indent"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> "3"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> basic-expr
                            basic-expr -> "i"
                            basic-expr -> "+="
                            basic-expr -> "2"
                          expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> """"
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> add-expr
                                add-expr -> "indent"
                                add-expr -> "+"
                                add-expr -> "1"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> unary-expr
                                      unary-expr -> "++"
                                      unary-expr -> "i"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "println"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""end""
                            fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""class-stmts""
                  switch-case -> "\n"
                  switch-case -> for-stmt
                    for-stmt -> "for"
                    for-stmt -> var-list
                      var-list -> "i"
                      var-list -> "="
                      var-list -> "0"
                    for-stmt -> ","
                    for-stmt -> relat-expr
                      relat-expr -> "i"
                      relat-expr -> "<"
                      relat-expr -> visit-expr
                        visit-expr -> "it"
                        visit-expr -> "."
                        visit-expr -> visit-expr
                          visit-expr -> "nodes"
                          visit-expr -> "."
                          visit-expr -> "size"
                    for-stmt -> ","
                    for-stmt -> unary-expr
                      unary-expr -> "i"
                      unary-expr -> "++"
                    for-stmt -> "\n"
                    for-stmt -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> equal-expr
                        equal-expr -> unary-expr
                          unary-expr -> "typeid"
                          unary-expr -> visit-expr
                            visit-expr -> "it"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "nodes"
                              element -> index
                                index -> "["
                                index -> "i"
                                index -> "]"
                        equal-expr -> "=="
                        equal-expr -> unary-expr
                          unary-expr -> "typeid"
                          unary-expr -> visit-expr
                            visit-expr -> "parsergen"
                            visit-expr -> "."
                            visit-expr -> "syntax_tree"
                      if-stmt -> "\n"
                      if-stmt -> if-stmt
                        if-stmt -> "if"
                        if-stmt -> equal-expr
                          equal-expr -> visit-expr
                            visit-expr -> "it"
                            visit-expr -> "."
                            visit-expr -> visit-expr
                              visit-expr -> element
                                element -> "nodes"
                                element -> index
                                  index -> "["
                                  index -> "i"
                                  index -> "]"
                              visit-expr -> "."
                              visit-expr -> "root"
                          equal-expr -> "=="
                          equal-expr -> ""member-control""
                        if-stmt -> "\n"
                        if-stmt -> stmts
                          stmts -> expr-stmt
                            expr-stmt -> element
                              element -> "format"
                              element -> fcall
                                fcall -> "("
                                fcall -> expr
                                  expr -> "os"
                                  expr -> ","
                                  expr -> expr
                                    expr -> "indent"
                                    expr -> ","
                                    expr -> visit-expr
                                      visit-expr -> "it"
                                      visit-expr -> "."
                                      visit-expr -> element
                                        element -> "nodes"
                                        element -> index
                                          index -> "["
                                          index -> "i"
                                          index -> "]"
                                fcall -> ")"
                            expr-stmt -> "\n"
                          stmts -> expr-stmt
                            expr-stmt -> visit-expr
                              visit-expr -> "os"
                              visit-expr -> "."
                              visit-expr -> element
                                element -> "println"
                                element -> fcall
                                  fcall -> "("
                                  fcall -> """"
                                  fcall -> ")"
                            expr-stmt -> "\n"
                        if-stmt -> else-stmt
                          else-stmt -> "else"
                          else-stmt -> "\n"
                        if-stmt -> stmts
                          stmts -> expr-stmt
                            expr-stmt -> element
                              element -> "format"
                              element -> fcall
                                fcall -> "("
                                fcall -> expr
                                  expr -> "os"
                                  expr -> ","
                                  expr -> expr
                                    expr -> add-expr
                                      add-expr -> "indent"
                                      add-expr -> "+"
                                      add-expr -> "1"
                                    expr -> ","
                                    expr -> visit-expr
                                      visit-expr -> "it"
                                      visit-expr -> "."
                                      visit-expr -> element
                                        element -> "nodes"
                                        element -> index
                                          index -> "["
                                          index -> "i"
                                          index -> "]"
                                fcall -> ")"
                            expr-stmt -> "\n"
                          stmts -> expr-stmt
                            expr-stmt -> visit-expr
                              visit-expr -> "os"
                              visit-expr -> "."
                              visit-expr -> element
                                element -> "println"
                                element -> fcall
                                  fcall -> "("
                                  fcall -> """"
                                  fcall -> ")"
                            expr-stmt -> "\n"
                        if-stmt -> "end"
                        if-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                    for-stmt -> "end"
                    for-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""member-control""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> visit-expr
                              visit-expr -> "it"
                              visit-expr -> "."
                              visit-expr -> element
                                element -> "nodes"
                                element -> index
                                  index -> "["
                                  index -> "0"
                                  index -> "]"
                            fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""control-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> visit-expr
                              visit-expr -> "it"
                              visit-expr -> "."
                              visit-expr -> visit-expr
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "0"
                                    index -> "]"
                                visit-expr -> "."
                                visit-expr -> "data"
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "1"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""expr-stmt""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> foreach-stmt
                      foreach-stmt -> "foreach"
                      foreach-stmt -> "i"
                      foreach-stmt -> "in"
                      foreach-stmt -> element
                        element -> "range"
                        element -> fcall
                          fcall -> "("
                          fcall -> mul-expr
                            mul-expr -> "2"
                            mul-expr -> "*"
                            mul-expr -> "indent"
                          fcall -> ")"
                      foreach-stmt -> "do"
                      foreach-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "" ""
                            fcall -> ")"
                      foreach-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "0"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "1"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""expr""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "0"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> relat-expr
                        relat-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> "nodes"
                            visit-expr -> "."
                            visit-expr -> "size"
                        relat-expr -> ">"
                        relat-expr -> "1"
                      if-stmt -> "\n"
                      if-stmt -> stmts
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> "", ""
                                fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> "indent"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> "2"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""single-expr""
                  switch-case -> "\n"
                  switch-case -> expr-stmt
                    expr-stmt -> element
                      element -> "format"
                      element -> fcall
                        fcall -> "("
                        fcall -> expr
                          expr -> "os"
                          expr -> ","
                          expr -> expr
                            expr -> "indent"
                            expr -> ","
                            expr -> visit-expr
                              visit-expr -> "it"
                              visit-expr -> "."
                              visit-expr -> element
                                element -> "nodes"
                                element -> index
                                  index -> "["
                                  index -> "0"
                                  index -> "]"
                        fcall -> ")"
                    expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""basic-expr""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> "0"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> relat-expr
                        relat-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> "nodes"
                            visit-expr -> "."
                            visit-expr -> "size"
                        relat-expr -> ">"
                        relat-expr -> "1"
                      if-stmt -> "\n"
                      if-stmt -> if-stmt
                        if-stmt -> "if"
                        if-stmt -> equal-expr
                          equal-expr -> unary-expr
                            unary-expr -> "typeid"
                            unary-expr -> visit-expr
                              visit-expr -> "it"
                              visit-expr -> "."
                              visit-expr -> element
                                element -> "nodes"
                                element -> index
                                  index -> "["
                                  index -> "1"
                                  index -> "]"
                          equal-expr -> "=="
                          equal-expr -> unary-expr
                            unary-expr -> "typeid"
                            unary-expr -> visit-expr
                              visit-expr -> "parsergen"
                              visit-expr -> "."
                              visit-expr -> "syntax_tree"
                        if-stmt -> "\n"
                        if-stmt -> stmts
                          stmts -> expr-stmt
                            expr-stmt -> element
                              element -> "format"
                              element -> fcall
                                fcall -> "("
                                fcall -> expr
                                  expr -> "os"
                                  expr -> ","
                                  expr -> expr
                                    expr -> "indent"
                                    expr -> ","
                                    expr -> visit-expr
                                      visit-expr -> "it"
                                      visit-expr -> "."
                                      visit-expr -> element
                                        element -> "nodes"
                                        element -> index
                                          index -> "["
                                          index -> "1"
                                          index -> "]"
                                fcall -> ")"
                            expr-stmt -> "\n"
                          stmts -> expr-stmt
                            expr-stmt -> element
                              element -> "format"
                              element -> fcall
                                fcall -> "("
                                fcall -> expr
                                  expr -> "os"
                                  expr -> ","
                                  expr -> expr
                                    expr -> "indent"
                                    expr -> ","
                                    expr -> visit-expr
                                      visit-expr -> "it"
                                      visit-expr -> "."
                                      visit-expr -> element
                                        element -> "nodes"
                                        element -> index
                                          index -> "["
                                          index -> "2"
                                          index -> "]"
                                fcall -> ")"
                            expr-stmt -> "\n"
                        if-stmt -> else-stmt
                          else-stmt -> "else"
                          else-stmt -> "\n"
                        if-stmt -> stmts
                          stmts -> expr-stmt
                            expr-stmt -> visit-expr
                              visit-expr -> "os"
                              visit-expr -> "."
                              visit-expr -> element
                                element -> "print"
                                element -> fcall
                                  fcall -> "("
                                  fcall -> "" = ""
                                  fcall -> ")"
                            expr-stmt -> "\n"
                          stmts -> expr-stmt
                            expr-stmt -> element
                              element -> "format"
                              element -> fcall
                                fcall -> "("
                                fcall -> expr
                                  expr -> "os"
                                  expr -> ","
                                  expr -> expr
                                    expr -> "indent"
                                    expr -> ","
                                    expr -> visit-expr
                                      visit-expr -> "it"
                                      visit-expr -> "."
                                      visit-expr -> element
                                        element -> "nodes"
                                        element -> index
                                          index -> "["
                                          index -> "2"
                                          index -> "]"
                                fcall -> ")"
                            expr-stmt -> "\n"
                        if-stmt -> "end"
                        if-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""asi-op""
                  switch-case -> "\n"
                  switch-case -> expr-stmt
                    expr-stmt -> visit-expr
                      visit-expr -> "os"
                      visit-expr -> "."
                      visit-expr -> element
                        element -> "print"
                        element -> fcall
                          fcall -> "("
                          fcall -> add-expr
                            add-expr -> "" ""
                            add-expr -> "+"
                            add-expr -> add-expr
                              add-expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> visit-expr
                                  visit-expr -> element
                                    element -> "nodes"
                                    element -> index
                                      index -> "["
                                      index -> "0"
                                      index -> "]"
                                  visit-expr -> "."
                                  visit-expr -> "data"
                              add-expr -> "+"
                              add-expr -> "" ""
                          fcall -> ")"
                    expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""lambda-expr""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""[""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> equal-expr
                        equal-expr -> unary-expr
                          unary-expr -> "typeid"
                          unary-expr -> visit-expr
                            visit-expr -> "it"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "nodes"
                              element -> index
                                index -> "["
                                index -> unary-expr
                                  unary-expr -> "++"
                                  unary-expr -> "i"
                                index -> "]"
                        equal-expr -> "=="
                        equal-expr -> unary-expr
                          unary-expr -> "typeid"
                          unary-expr -> visit-expr
                            visit-expr -> "parsergen"
                            visit-expr -> "."
                            visit-expr -> "syntax_tree"
                      if-stmt -> "\n"
                      if-stmt -> expr-stmt
                        expr-stmt -> element
                          element -> "format"
                          element -> fcall
                            fcall -> "("
                            fcall -> expr
                              expr -> "os"
                              expr -> ","
                              expr -> expr
                                expr -> "indent"
                                expr -> ","
                                expr -> visit-expr
                                  visit-expr -> "it"
                                  visit-expr -> "."
                                  visit-expr -> element
                                    element -> "nodes"
                                    element -> index
                                      index -> "["
                                      index -> "i"
                                      index -> "]"
                            fcall -> ")"
                        expr-stmt -> "\n"
                      if-stmt -> else-stmt
                        else-stmt -> "else"
                        else-stmt -> "\n"
                      if-stmt -> expr-stmt
                        expr-stmt -> unary-expr
                          unary-expr -> "i"
                          unary-expr -> "--"
                        expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> ""](""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> basic-expr
                        basic-expr -> "i"
                        basic-expr -> "+="
                        basic-expr -> "2"
                      expr-stmt -> "\n"
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> equal-expr
                        equal-expr -> unary-expr
                          unary-expr -> "typeid"
                          unary-expr -> visit-expr
                            visit-expr -> "it"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "nodes"
                              element -> index
                                index -> "["
                                index -> unary-expr
                                  unary-expr -> "++"
                                  unary-expr -> "i"
                                index -> "]"
                        equal-expr -> "=="
                        equal-expr -> unary-expr
                          unary-expr -> "typeid"
                          unary-expr -> visit-expr
                            visit-expr -> "parsergen"
                            visit-expr -> "."
                            visit-expr -> "syntax_tree"
                      if-stmt -> "\n"
                      if-stmt -> expr-stmt
                        expr-stmt -> element
                          element -> "format"
                          element -> fcall
                            fcall -> "("
                            fcall -> expr
                              expr -> "os"
                              expr -> ","
                              expr -> expr
                                expr -> "indent"
                                expr -> ","
                                expr -> visit-expr
                                  visit-expr -> "it"
                                  visit-expr -> "."
                                  visit-expr -> element
                                    element -> "nodes"
                                    element -> index
                                      index -> "["
                                      index -> "i"
                                      index -> "]"
                            fcall -> ")"
                        expr-stmt -> "\n"
                      if-stmt -> else-stmt
                        else-stmt -> "else"
                        else-stmt -> "\n"
                      if-stmt -> expr-stmt
                        expr-stmt -> unary-expr
                          unary-expr -> "i"
                          unary-expr -> "--"
                        expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> "")""
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> basic-expr
                        basic-expr -> "i"
                        basic-expr -> "+="
                        basic-expr -> "1"
                      expr-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> unary-expr
                                      unary-expr -> "++"
                                      unary-expr -> "i"
                                    index -> "]"
                          fcall -> ")"
                      expr-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""capture-list""
                  switch-case -> "\n"
                  switch-case -> stmts
                    stmts -> if-stmt
                      if-stmt -> "if"
                      if-stmt -> equal-expr
                        equal-expr -> visit-expr
                          visit-expr -> "it"
                          visit-expr -> "."
                          visit-expr -> visit-expr
                            visit-expr -> element
                              element -> "nodes"
                              element -> index
                                index -> "["
                                index -> "0"
                                index -> "]"
                            visit-expr -> "."
                            visit-expr -> "data"
                        equal-expr -> "=="
                        equal-expr -> ""id""
                      if-stmt -> "\n"
                      if-stmt -> expr-stmt
                        expr-stmt -> basic-expr
                          basic-expr -> "i"
                          basic-expr -> "="
                          basic-expr -> unary-expr
                            unary-expr -> "-"
                            unary-expr -> "1"
                        expr-stmt -> "\n"
                      if-stmt -> else-stmt
                        else-stmt -> "else"
                        else-stmt -> "\n"
                      if-stmt -> expr-stmt
                        expr-stmt -> visit-expr
                          visit-expr -> "os"
                          visit-expr -> "."
                          visit-expr -> element
                            element -> "print"
                            element -> fcall
                              fcall -> "("
                              fcall -> ""= ""
                              fcall -> ")"
                        expr-stmt -> "\n"
                      if-stmt -> "end"
                      if-stmt -> "\n"
                    stmts -> expr-stmt
                      expr-stmt -> visit-expr
                        visit-expr -> "os"
                        visit-expr -> "."
                        visit-expr -> element
                          element -> "print"
                          element -> fcall
                            fcall -> "("
                            fcall -> visit-expr
                              visit-expr -> "it"
                              visit-expr -> "."
                              visit-expr -> visit-expr
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> unary-expr
                                      unary-expr -> "++"
                                      unary-expr -> "i"
                                    index -> "]"
                                visit-expr -> "."
                                visit-expr -> "data"
                            fcall -> ")"
                      expr-stmt -> "\n"
                    stmts -> for-stmt
                      for-stmt -> "for"
                      for-stmt -> var-list
                        var-list -> "j"
                        var-list -> "="
                        var-list -> "0"
                      for-stmt -> ","
                      for-stmt -> "true"
                      for-stmt -> ","
                      for-stmt -> "null"
                      for-stmt -> "\n"
                      for-stmt -> stmts
                        stmts -> if-stmt
                          if-stmt -> "if"
                          if-stmt -> relat-expr
                            relat-expr -> "i"
                            relat-expr -> ">="
                            relat-expr -> visit-expr
                              visit-expr -> "it"
                              visit-expr -> "."
                              visit-expr -> "size"
                          if-stmt -> "\n"
                          if-stmt -> control-stmt
                            control-stmt -> "break"
                            control-stmt -> "\n"
                          if-stmt -> "end"
                          if-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> "", ""
                                fcall -> ")"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> unary-expr
                            unary-expr -> "i"
                            unary-expr -> "++"
                          expr-stmt -> "\n"
                        stmts -> expr-stmt
                          expr-stmt -> element
                            element -> "format"
                            element -> fcall
                              fcall -> "("
                              fcall -> expr
                                expr -> "os"
                                expr -> ","
                                expr -> expr
                                  expr -> "indent"
                                  expr -> ","
                                  expr -> visit-expr
                                    visit-expr -> "it"
                                    visit-expr -> "."
                                    visit-expr -> element
                                      element -> "nodes"
                                      element -> index
                                        index -> "["
                                        index -> unary-expr
                                          unary-expr -> "++"
                                          unary-expr -> "i"
                                        index -> "]"
                              fcall -> ")"
                          expr-stmt -> "\n"
                      for-stmt -> "end"
                      for-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-case
                  switch-case -> "case"
                  switch-case -> ""argument-list""
                  switch-case -> "\n"
                  switch-case -> if-stmt
                    if-stmt -> "if"
                    if-stmt -> equal-expr
                      equal-expr -> visit-expr
                        visit-expr -> "it"
                        visit-expr -> "."
                        visit-expr -> visit-expr
                          visit-expr -> element
                            element -> "nodes"
                            element -> index
                              index -> "["
                              index -> "0"
                              index -> "]"
                          visit-expr -> "."
                          visit-expr -> "data"
                      equal-expr -> "=="
                      equal-expr -> ""...""
                    if-stmt -> "\n"
                    if-stmt -> stmts
                      stmts -> expr-stmt
                        expr-stmt -> visit-expr
                          visit-expr -> "os"
                          visit-expr -> "."
                          visit-expr -> element
                            element -> "print"
                            element -> fcall
                              fcall -> "("
                              fcall -> ""... ""
                              fcall -> ")"
                        expr-stmt -> "\n"
                      stmts -> expr-stmt
                        expr-stmt -> visit-expr
                          visit-expr -> "os"
                          visit-expr -> "."
                          visit-expr -> element
                            element -> "print"
                            element -> fcall
                              fcall -> "("
                              fcall -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> visit-expr
                                  visit-expr -> element
                                    element -> "nodes"
                                    element -> index
                                      index -> "["
                                      index -> "1"
                                      index -> "]"
                                  visit-expr -> "."
                                  visit-expr -> "data"
                              fcall -> ")"
                        expr-stmt -> "\n"
                    if-stmt -> else-stmt
                      else-stmt -> "else"
                      else-stmt -> "\n"
                    if-stmt -> stmts
                      stmts -> if-stmt
                        if-stmt -> "if"
                        if-stmt -> equal-expr
                          equal-expr -> visit-expr
                            visit-expr -> "it"
                            visit-expr -> "."
                            visit-expr -> visit-expr
                              visit-expr -> element
                                element -> "nodes"
                                element -> index
                                  index -> "["
                                  index -> "0"
                                  index -> "]"
                              visit-expr -> "."
                              visit-expr -> "data"
                          equal-expr -> "=="
                          equal-expr -> ""=""
                        if-stmt -> "\n"
                        if-stmt -> expr-stmt
                          expr-stmt -> visit-expr
                            visit-expr -> "os"
                            visit-expr -> "."
                            visit-expr -> element
                              element -> "print"
                              element -> fcall
                                fcall -> "("
                                fcall -> ""=""
                                fcall -> ")"
                          expr-stmt -> "\n"
                        if-stmt -> else-stmt
                          else-stmt -> "else"
                          else-stmt -> "\n"
                        if-stmt -> expr-stmt
                          expr-stmt -> basic-expr
                            basic-expr -> "i"
                            basic-expr -> "-="
                            basic-expr -> "1"
                          expr-stmt -> "\n"
                        if-stmt -> "end"
                        if-stmt -> "\n"
                      stmts -> expr-stmt
                        expr-stmt -> visit-expr
                          visit-expr -> "os"
                          visit-expr -> "."
                          visit-expr -> element
                            element -> "print"
                            element -> fcall
                              fcall -> "("
                              fcall -> visit-expr
                                visit-expr -> "it"
                                visit-expr -> "."
                                visit-expr -> visit-expr
                                  visit-expr -> element
                                    element -> "nodes"
                                    element -> index
                                      index -> "["
                                      index -> unary-expr
                                        unary-expr -> "++"
                                        unary-expr -> "i"
                                      index -> "]"
                                  visit-expr -> "."
                                  visit-expr -> "data"
                              fcall -> ")"
                        expr-stmt -> "\n"
                      stmts -> if-stmt
                        if-stmt -> "if"
                        if-stmt -> relat-expr
                          relat-expr -> "i"
                          relat-expr -> "<"
                          relat-expr -> add-expr
                            add-expr -> visit-expr
                              visit-expr -> "it"
                              visit-expr -> "."
                              visit-expr -> visit-expr
                                visit-expr -> "nodes"
                                visit-expr -> "."
                                visit-expr -> "size"
                            add-expr -> "-"
                            add-expr -> "1"
                        if-stmt -> "\n"
                        if-stmt -> if-stmt
                          if-stmt -> "if"
                          if-stmt -> equal-expr
                            equal-expr -> visit-expr
                              visit-expr -> "it"
                              visit-expr -> "."
                              visit-expr -> visit-expr
                                visit-expr -> element
                                  element -> "nodes"
                                  element -> index
                                    index -> "["
                                    index -> unary-expr
                                      unary-expr -> "++"
                                      unary-expr -> "i"
                                    index -> "]"
                                visit-expr -> "."
                                visit-expr -> "data"
                            equal-expr -> "=="
                            equal-expr -> "":""
                          if-stmt -> "\n"
                          if-stmt -> stmts
                            stmts -> expr-stmt
                              expr-stmt -> visit-expr
                                visit-expr -> "os"
                                visit-expr -> "."
                                visit-expr -> element
                                  element -> "print"
                                  element -> fcall
                                    fcall -> "("
                                    fcall -> "" : ""
                                    fcall -> ")"
                              expr-stmt -> "\n"
                            stmts -> expr-stmt
                              expr-stmt -> element
                                element -> "format"
                                element -> fcall
                                  fcall -> "("
                                  fcall -> expr
                                    expr -> "os"
                                    expr -> ","
                                    expr -> expr
                                      expr -> "indent"
                                      expr -> ","
                                      expr -> visit-expr
                                        visit-expr -> "it"
                                        visit-expr -> "."
                                        visit-expr -> element
                                          element -> "nodes"
                                          element -> index
                                            index -> "["
                                            index -> unary-expr
                                              unary-expr -> "++"
                                              unary-expr -> "i"
                                            index -> "]"
                                  fcall -> ")"
                              expr-stmt -> "\n"
                          if-stmt -> else-stmt
                            else-stmt -> "else"
                            else-stmt -> "\n"
                          if-stmt -> expr-stmt
                            expr-stmt -> basic-expr
                              basic-expr -> "i"
                              basic-expr -> "-="
                              basic-expr -> "1"
                            expr-stmt -> "\n"
                          if-stmt -> "end"
                          if-stmt -> "\n"
                        if-stmt -> "end"
                        if-stmt -> "\n"
                      stmts -> for-stmt
                        for-stmt -> "for"
                        for-stmt -> var-list
                          var-list -> "j"
                          var-list -> "="
                          var-list -> "0"
                        for-stmt -> ","
                        for-stmt -> "true"
                        for-stmt -> ","
                        for-stmt -> "null"
                        for-stmt -> "\n"
                        for-stmt -> stmts
                          stmts -> if-stmt
                            if-stmt -> "if"
                            if-stmt -> relat-expr
                              relat-expr -> "i"
                              relat-expr -> ">="
                              relat-expr -> add-expr
                                add-expr -> visit-expr
                                  visit-expr -> "it"
                                  visit-expr -> "."
                                  visit-expr -> visit-expr
                                    visit-expr -> "nodes"
                                    visit-expr -> "."
                                    visit-expr -> "size"
                                add-expr -> "-"
                                add-expr -> "1"
                            if-stmt -> "\n"
                            if-stmt -> control-stmt
                              control-stmt -> "break"
                              control-stmt -> "\n"
                            if-stmt -> "end"
                            if-stmt -> "\n"
                          stmts -> expr-stmt
                            expr-stmt -> visit-expr
                              visit-expr -> "os"
                              visit-expr -> "."
                              visit-expr -> element
                                element -> "print"
                                element -> fcall
                                  fcall -> "("
                                  fcall -> "", ""
                                  fcall -> ")"
                            expr-stmt -> "\n"
                          stmts -> expr-stmt
                            expr-stmt -> unary-expr
                              unary-expr -> "++"
                              unary-expr -> "i"
                            expr-stmt -> "\n"
                          stmts -> expr-stmt
                            expr-stmt -> element
                              element -> "format"
                              element -> fcall
                                fcall -> "("
                                fcall -> expr
                                  expr -> "os"
                                  expr -> ","
                                  expr -> expr
                                    expr -> "indent"
                                    expr -> ","
                                    expr -> visit-expr
                                      visit-expr -> "it"
                                      visit-expr -> "."
                                      visit-expr -> element
                                        element -> "nodes"
                                        element -> index
                                          index -> "["
                                          index -> unary-expr
                                            unary-expr -> "++"
                                            unary-expr -> "i"
                                          index -> "]"
                                fcall -> ")"
                            expr-stmt -> "\n"
                        for-stmt -> "end"
                        for-stmt -> "\n"
                    if-stmt -> "end"
                    if-stmt -> "\n"
                  switch-case -> "end"
                  switch-case -> "\n"
                switch-stmts -> switch-default
                  switch-default -> "default"
                  switch-default -> "\n"
                  switch-default -> foreach-stmt
                    foreach-stmt -> "foreach"
                    foreach-stmt -> "it"
                    foreach-stmt -> "in"
                    foreach-stmt -> visit-expr
                      visit-expr -> "it"
                      visit-expr -> "."
                      visit-expr -> "nodes"
                    foreach-stmt -> "\n"
                    foreach-stmt -> expr-stmt
                      expr-stmt -> element
                        element -> "format"
                        element -> fcall
                          fcall -> "("
                          fcall -> expr
                            expr -> "os"
                            expr -> ","
                            expr -> expr
                              expr -> "indent"
                              expr -> ","
                              expr -> "it"
                          fcall -> ")"
                      expr-stmt -> "\n"
                    foreach-stmt -> "end"
                    foreach-stmt -> "\n"
                  switch-default -> "end"
                  switch-default -> "\n"
              switch-stmt -> "end"
              switch-stmt -> "\n"
          if-stmt -> "end"
          if-stmt -> "\n"
        stmts -> if-stmt
          if-stmt -> "if"
          if-stmt -> equal-expr
            equal-expr -> visit-expr
              visit-expr -> "parser"
              visit-expr -> "."
              visit-expr -> "ast"
            equal-expr -> "!="
            equal-expr -> "null"
          if-stmt -> "\n"
          if-stmt -> stmts
            stmts -> expr-stmt
              expr-stmt -> element
                element -> "compress_ast"
                element -> fcall
                  fcall -> "("
                  fcall -> visit-expr
                    visit-expr -> "parser"
                    visit-expr -> "."
                    visit-expr -> "ast"
                  fcall -> ")"
              expr-stmt -> "\n"
            stmts -> expr-stmt
              expr-stmt -> element
                element -> "format"
                element -> fcall
                  fcall -> "("
                  fcall -> expr
                    expr -> visit-expr
                      visit-expr -> "system"
                      visit-expr -> "."
                      visit-expr -> "out"
                    expr -> ","
                    expr -> expr
                      expr -> "0"
                      expr -> ","
                      expr -> visit-expr
                        visit-expr -> "parser"
                        visit-expr -> "."
                        visit-expr -> "ast"
                  fcall -> ")"
              expr-stmt -> "\n"
          if-stmt -> "end"
          if-stmt -> "\n"
